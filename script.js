// „Éù„É¢„Éâ„É≠„Çø„Ç§„Éû„Éº & RPGÁµ±Âêà„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ - „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Áâà

// „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇØ„É©„Çπ
class PomodoroApp {
    constructor() {
        this.TIMER_DURATION = 25 * 60; // 25ÂàÜ
        
        this.state = {
            timer: this.TIMER_DURATION,
            isRunning: false,
            startTime: null,
            gameTimerId: null,
            isMuted: false
        };
        
        // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
        this.taskManager = new TaskManager();
        this.gameSystem = new GameSystem();
        this.animationSystem = new AnimationSystem();
        
        // „Ç¢„É©„Éº„É†Èü≥„ÅÆÂàùÊúüÂåñ
        this.alarmSound = new Audio('sound/alarm.mp3');
        this.alarmSound.preload = 'auto';
        
        this.init();
    }
    
    init() {
        this.updateDisplay();
        this.gameSystem.updateDisplay(); // „Ç≤„Éº„É†„Ç∑„Çπ„ÉÜ„É†„ÅÆË°®Á§∫„ÇÇÊõ¥Êñ∞
        this.bindEvents();
        this.validateBPM();
        this.updateMuteButton(); // „Éü„É•„Éº„Éà„Éú„Çø„É≥„ÅÆÂàùÊúüÂåñ
    }
    
    bindEvents() {
        document.getElementById('startbtn').addEventListener('click', () => this.toggleTimer());
        document.getElementById('resetbtn').addEventListener('click', () => this.resetTimer());
        document.getElementById('bpmInput').addEventListener('input', () => this.handleBPMChange());
        document.getElementById('exportbtn').addEventListener('click', () => this.taskManager.exportData());
        document.getElementById('mutebtn').addEventListener('click', () => this.toggleMute());
        
        // „Éö„Éº„Ç∏ÂêåÊúü„Ç§„Éô„É≥„Éà
        document.addEventListener('visibilitychange', () => this.syncTimer());
        window.addEventListener('focus', () => this.syncTimer());
    }
    
    toggleTimer() {
        if (this.state.isRunning) {
            this.stopTimer();
        } else {
            this.startTimer();
        }
    }
    
    startTimer() {
        this.state.isRunning = true;
        this.state.startTime = Date.now();
        
        document.getElementById('startbtn').textContent = '„Çπ„Éà„ÉÉ„Éó';
        
        this.animationSystem.start(this.validateBPM());
        this.gameSystem.startExploration();
        
        this.state.gameTimerId = setInterval(() => {
            if (this.updateTimer() <= 0) {
                this.completePomodoro();
            }
        }, 1000);
    }
    
    stopTimer() {
        this.state.isRunning = false;
        this.state.startTime = null;
        
        if (this.state.gameTimerId) {
            clearInterval(this.state.gameTimerId);
            this.state.gameTimerId = null;
        }
        
        document.getElementById('startbtn').textContent = '„Çπ„Çø„Éº„Éà';
        this.animationSystem.stop();
        this.gameSystem.stopExploration();
    }
    
    resetTimer() {
        this.stopTimer();
        this.state.timer = this.TIMER_DURATION;
        this.updateDisplay();
        this.animationSystem.resetCharacter();
        this.gameSystem.clearBoxes();
    }
    
    completePomodoro() {
        this.stopTimer();
        
        // „Ç¢„É©„Éº„É†Èü≥„ÇíÂÜçÁîü
        this.playAlarm();
        
        const taskName = document.getElementById('taskInput').value || 'ÁÑ°È°å„ÅÆ„Çø„Çπ„ÇØ';
        this.taskManager.recordCompletion(taskName);
        this.gameSystem.completeExploration();
        
        // Ëá™Âãï„É™„Çª„ÉÉ„Éà
        this.state.timer = this.TIMER_DURATION;
        this.updateDisplay();
        this.animationSystem.resetCharacter();
        
    }
    
    playAlarm() {
        // „Éü„É•„Éº„ÉàÁä∂ÊÖã„ÅÆÂ†¥Âêà„ÅØÈü≥Â£∞„ÇíÂÜçÁîü„Åó„Å™„ÅÑ
        if (this.state.isMuted) {
            this.fallbackNotification();
            return;
        }
        
        try {
            // Èü≥Â£∞„ÇíÊúÄÂàù„Åã„ÇâÂÜçÁîü
            this.alarmSound.currentTime = 0;
            this.alarmSound.play().catch(error => {
                console.warn('„Ç¢„É©„Éº„É†Èü≥„ÅÆÂÜçÁîü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
                // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éñ„É©„Ç¶„Ç∂„ÅÆ„Éá„Éï„Ç©„É´„ÉàÈü≥
                this.fallbackNotification();
            });
        } catch (error) {
            console.warn('„Ç¢„É©„Éº„É†Èü≥„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
            this.fallbackNotification();
        }
    }
    
    fallbackNotification() {
        // „Éñ„É©„Ç¶„Ç∂„ÅÆÈÄöÁü•Èü≥ („Ç∑„Çπ„ÉÜ„É†Èü≥)
        if ('speechSynthesis' in window && !this.state.isMuted) {
            const utterance = new SpeechSynthesisUtterance('„Éù„É¢„Éâ„Éº„É≠ÂÆå‰∫Ü');
            utterance.volume = 0.1;
            speechSynthesis.speak(utterance);
        }
        
        // „Éì„Ç∏„É•„Ç¢„É´ÈÄöÁü•
        document.title = 'üîî „Éù„É¢„Éâ„Éº„É≠ÂÆå‰∫Ü! - „Éù„É¢„Éâ„É≠Â≠ê';
        setTimeout(() => {
            document.title = '„Éù„É¢„Éâ„É≠Â≠ê';
        }, 5000);
    }
    
    toggleMute() {
        this.state.isMuted = !this.state.isMuted;
        this.updateMuteButton();
    }
    
    updateMuteButton() {
        const muteBtn = document.getElementById('mutebtn');
        if (this.state.isMuted) {
            muteBtn.textContent = 'üîá';
            muteBtn.title = '„Ç¢„É©„Éº„É†Èü≥„Çí„Ç™„É≥„Å´„Åô„Çã';
            muteBtn.classList.add('muted');
        } else {
            muteBtn.textContent = 'üîä';
            muteBtn.title = '„Ç¢„É©„Éº„É†Èü≥„Çí„Ç™„Éï„Å´„Åô„Çã';
            muteBtn.classList.remove('muted');
        }
    }
    
    updateTimer() {
        if (!this.state.startTime) return this.state.timer;
        
        const elapsed = Math.floor((Date.now() - this.state.startTime) / 1000);
        const remaining = Math.max(0, this.TIMER_DURATION - elapsed);
        
        this.state.timer = remaining;
        this.updateDisplay();
        return remaining;
    }
    
    syncTimer() {
        if (this.state.isRunning && this.state.startTime) {
            this.updateTimer();
        }
    }
    
    updateDisplay() {
        const minutes = String(Math.floor(this.state.timer / 60)).padStart(2, '0');
        const seconds = String(this.state.timer % 60).padStart(2, '0');
        const timerDisplay = document.getElementById('timerDisplay');
        if (timerDisplay) {
            timerDisplay.textContent = `${minutes}:${seconds}`;
        } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Âè§„ÅÑÊßãÈÄ†„ÅÆÂ†¥Âêà
            document.getElementById('timer').textContent = `${minutes}:${seconds}`;
        }
    }
    
    handleBPMChange() {
        const bpm = this.validateBPM();
        if (this.state.isRunning) {
            this.animationSystem.updateSpeed(bpm);
        }
    }
    
    validateBPM() {
        const input = document.getElementById('bpmInput');
        let bpm = parseInt(input.value) || 120;
        bpm = Math.max(1, Math.min(300, bpm));
        input.value = bpm;
        return bpm;
    }
}

// „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Ç∑„Çπ„ÉÜ„É†
class AnimationSystem {
    constructor() {
        this.frameCount = 6;
        this.currentFrame = 1;
        this.intervalId = null;
    }
    
    start(bpm) {
        this.stop();
        const interval = (60 / bpm) * 1000 / 3;
        this.intervalId = setInterval(() => this.updateFrame(), interval);
    }
    
    stop() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
    }
    
    updateSpeed(bpm) {
        if (this.intervalId) {
            this.start(bpm);
        }
    }
    
    updateFrame() {
        this.currentFrame = (this.currentFrame % this.frameCount) + 1;
        document.getElementById('character').src = `images/walk${this.currentFrame}.png`;
    }
    
    resetCharacter() {
        this.currentFrame = 1;
        document.getElementById('character').src = `images/walk1.png`;
    }
}

// „Çø„Çπ„ÇØÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
class TaskManager {
    constructor() {
        this.data = this.loadData();
        this.updateUI();
    }
    
    loadData() {
        const saved = localStorage.getItem('pomodoroTasks');
        return saved ? JSON.parse(saved) : { tasks: [], completions: [] };
    }
    
    saveData() {
        localStorage.setItem('pomodoroTasks', JSON.stringify(this.data));
    }
    
    recordCompletion(taskName) {
        taskName = taskName.trim() || 'ÁÑ°È°å„ÅÆ„Çø„Çπ„ÇØ';
        
        if (!this.data.tasks.includes(taskName)) {
            this.data.tasks.push(taskName);
        }
        
        this.data.completions.push({
            taskName,
            date: new Date().toDateString(),
            timestamp: new Date().toISOString()
        });
        
        this.saveData();
        this.updateUI();
    }
    
    updateUI() {
        this.updateSuggestions();
        this.displayRecords();
    }
    
    updateSuggestions() {
        const datalist = document.getElementById('taskSuggestions');
        datalist.innerHTML = '';
        
        const frequency = {};
        this.data.completions.forEach(c => {
            frequency[c.taskName] = (frequency[c.taskName] || 0) + 1;
        });
        
        const sorted = this.data.tasks.sort((a, b) => (frequency[b] || 0) - (frequency[a] || 0));
        
        sorted.forEach(task => {
            const option = document.createElement('option');
            option.value = task;
            datalist.appendChild(option);
        });
        
        document.getElementById('taskInput').setAttribute('list', 'taskSuggestions');
    }
    
    displayRecords() {
        const container = document.getElementById('recordsList');
        
        if (this.data.completions.length === 0) {
            container.innerHTML = 'Ë®òÈå≤„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì';
            return;
        }
        
        const grouped = {};
        this.data.completions.forEach(completion => {
            const { date, taskName } = completion;
            if (!grouped[date]) grouped[date] = {};
            grouped[date][taskName] = (grouped[date][taskName] || 0) + 1;
        });
        
        const html = Object.keys(grouped)
            .sort((a, b) => new Date(b) - new Date(a))
            .map(date => {
                const tasks = Object.entries(grouped[date])
                    .map(([task, count]) => `<li>${task}: ${count}ÂõûÂÆå‰∫Ü</li>`)
                    .join('');
                return `<div style=\"margin-bottom: 10px;\"><strong>${date}</strong><ul style=\"margin: 5px 0;\">${tasks}</ul></div>`;
            })
            .join('');
        
        container.innerHTML = html;
    }
    
    exportData() {
        // CSV„Éò„ÉÉ„ÉÄ„Éº
        const csvHeader = '„Çø„Çπ„ÇØÂêç,ÂÆå‰∫ÜÊó•ÊôÇ,ÊâÄË¶ÅÊôÇÈñì(ÂàÜ),„É°„É¢\n';
        
        // „Éá„Éº„Çø„ÇíCSVÂΩ¢Âºè„Å´Â§âÊèõ
        const csvRows = this.data.completions.map(completion => {
            const taskName = completion.task || 'Êú™Ë®≠ÂÆö';
            const completedAt = new Date(completion.timestamp).toLocaleString('ja-JP');
            const duration = Math.round(completion.duration / 60); // Áßí„ÇíÂàÜ„Å´Â§âÊèõ
            const memo = ''; // Â∞ÜÊù•ÁöÑ„Å´„É°„É¢Ê©üËÉΩ„ÇíËøΩÂä†„Åô„ÇãÂ†¥Âêà
            
            // CSV„Ç®„Çπ„Ç±„Éº„ÉóÔºà„Ç´„É≥„Éû„ÇÑÊîπË°å„ÇíÂê´„ÇÄÂ†¥Âêà„Å´„ÉÄ„Éñ„É´„ÇØ„Ç©„Éº„Éà„ÅßÂõ≤„ÇÄÔºâ
            const escapeCSV = (value) => {
                if (value.includes(',') || value.includes('"') || value.includes('\n')) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value;
            };
            
            return `${escapeCSV(taskName)},${escapeCSV(completedAt)},${duration},${escapeCSV(memo)}`;
        }).join('\n');
        
        // CSV„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁµêÂêà
        const csvContent = csvHeader + csvRows;
        
        // BOM‰ªò„ÅçUTF-8„ÅßBlob„Çí‰ΩúÊàêÔºàExcel„ÅßÊñáÂ≠óÂåñ„Åë„ÇíÈò≤„Åê„Åü„ÇÅÔºâ
        const bom = '\uFEFF';
        const blob = new Blob([bom + csvContent], { type: 'text/csv;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `„Éù„É¢„Éâ„É≠Ë®òÈå≤-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}

// „Ç≤„Éº„É†„Ç∑„Çπ„ÉÜ„É†
class GameSystem {
    constructor() {
        this.playerData = this.loadPlayerData();
        this.itemBoxes = [];
        this.explorationTimer = null;
        this.startTime = null;
        
        // „Ç¢„Ç§„ÉÜ„É†„Éá„Éº„Çø„ÇíÈùûÂêåÊúü„ÅßË™≠„ÅøËæº„Åø
        this.itemData = null;
        this.loadItemData();
    }
    
    async loadItemData() {
        try {
            // „É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„Åß„ÅØ fetch „Åå‰ΩøÁî®„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Çí‰ΩøÁî®
            if (window.location.protocol === 'file:') {
                console.log('„É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„É¢„Éº„Éâ: „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®');
                this.itemData = this.getFallbackItemData();
                return;
            }
            
            const response = await fetch('items.json');
            this.itemData = await response.json();
            console.log('„Ç¢„Ç§„ÉÜ„É†„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü');
        } catch (error) {
            console.warn('„Ç¢„Ç§„ÉÜ„É†„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
            console.log('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„Åæ„Åô');
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éè„Éº„Éâ„Ç≥„Éº„Éâ„Åï„Çå„Åü„Éá„Éº„Çø„Çí‰ΩøÁî®
            this.itemData = this.getFallbackItemData();
        }
    }
    
    getFallbackItemData() {
        return {
            items: {
                common: ['Âè§„Å≥„Åü„Ç≥„Ç§„É≥', '„Åã„Åë„ÅüÂâ£', 'Ë¨é„ÅÆÁ®Æ', 'Â∞è„Åï„Å™Ëñ¨Ëçâ', '„Éú„É≠„Éú„É≠„ÅÆÂú∞Âõ≥'],
                rare: ['È≠îÊ≥ï„ÅÆÊ∞¥Êô∂', 'Âè§‰ª£„ÅÆÊõ∏Áâ©', 'ÂÖâ„ÇãÁü≥', 'ÈäÄ„ÅÆÊåáËº™', 'Á≤æÈúä„ÅÆÁæΩ'],
                epic: ['„Éâ„É©„Ç¥„É≥„ÅÆÈ±ó', 'Ë≥¢ËÄÖ„ÅÆÊùñ', 'ÊôÇ„ÅÆÁ†ÇÊôÇË®à', 'ËÅñ„Å™„ÇãÁõæ', '‰∏çÊ≠ªÈ≥•„ÅÆÁæΩÊ†π'],
                legendary: ['‰∏ñÁïåÊ®π„ÅÆËëâ', 'ÂâµÈÄ†„ÅÆÁü≥', 'ÁÑ°Èôê„ÅÆÁü•Ë≠ò', 'Êòü„ÅÆÊ¨†Áâá', 'ÁúüÁêÜ„ÅÆÊõ∏']
            },
            descriptions: {
                'Âè§„Å≥„Åü„Ç≥„Ç§„É≥': 'Ëø∑ÂÆÆ„ÅßË¶ã„Å§„Åë„ÅüÂè§„ÅÑÈÄöË≤®„ÄÇ„Åæ„Å†‰æ°ÂÄ§„Åå„ÅÇ„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÄÇ',
                '„Åã„Åë„ÅüÂâ£': 'ÂàÉ„Åì„Åº„Çå„Åó„ÅüÂè§„ÅÑÂâ£„ÄÇ‰øÆÁêÜ„Åô„Çå„Å∞‰Ωø„Åà„Åù„ÅÜ„Å†„ÄÇ',
                'Ë¨é„ÅÆÁ®Æ': 'Ê≠£‰Ωì‰∏çÊòé„ÅÆÊ§çÁâ©„ÅÆÁ®Æ„ÄÇ‰Ωï„ÅåËÇ≤„Å§„ÅÆ„Å†„Çç„ÅÜ„ÅãÔºü',
                'Â∞è„Åï„Å™Ëñ¨Ëçâ': '‰ΩìÂäõÂõûÂæ©„Å´ÂäπÊûú„ÅÆ„ÅÇ„ÇãËñ¨Ëçâ„ÄÇÂÜíÈô∫„Å´„ÅØÂøÖÈ†à„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÄÇ',
                '„Éú„É≠„Éú„É≠„ÅÆÂú∞Âõ≥': 'Á†¥„Çå„Åã„Åë„ÅüÂè§„ÅÑÂú∞Âõ≥„ÄÇÁßòÂØÜ„ÅÆÂ†¥ÊâÄ„ÅåË®ò„Åï„Çå„Å¶„ÅÑ„ÇãÔºü',
                'È≠îÊ≥ï„ÅÆÊ∞¥Êô∂': 'È≠îÂäõ„ÇíÂÆø„Åó„ÅüÁæé„Åó„ÅÑÊ∞¥Êô∂„ÄÇËß¶„Çå„Çã„Å®Ê∏©„Åã„ÅÑ„ÄÇ',
                'Âè§‰ª£„ÅÆÊõ∏Áâ©': 'Âè§‰ª£ÊñáÂ≠ó„ÅßÊõ∏„Åã„Çå„ÅüË¨é„ÅÆÊõ∏Áâ©„ÄÇÁü•Ë≠ò„ÅÆÂÆùÂ∫´„Å†„ÄÇ',
                'ÂÖâ„ÇãÁü≥': 'ÊöóÈóá„Åß„ÇÇÂÖâ„ÇíÊîæ„Å§‰∏çÊÄùË≠∞„Å™Áü≥„ÄÇÈÅìÊ®ô„Å®„Åó„Å¶‰Ωø„Åà„Åù„ÅÜ„ÄÇ',
                'ÈäÄ„ÅÆÊåáËº™': 'Á≤æÂ∑ß„Å™Á¥∞Â∑•„ÅåÊñΩ„Åï„Çå„ÅüÈäÄË£Ω„ÅÆÊåáËº™„ÄÇÈ´ò‰æ°„Åù„ÅÜ„Å†„ÄÇ',
                'Á≤æÈúä„ÅÆÁæΩ': 'È¢®„ÅÆÁ≤æÈúä„ÅåËêΩ„Å®„Åó„ÅüÁæΩÊ†π„ÄÇËªΩ„ÇÑ„Åã„ÅßÁæé„Åó„ÅÑ„ÄÇ',
                '„Éâ„É©„Ç¥„É≥„ÅÆÈ±ó': '‰ºùË™¨„ÅÆ„Éâ„É©„Ç¥„É≥„ÅÆÈ±ó„ÄÇ„Å®„Å¶„ÇÇÁ°¨„Åè„ÄÅË≤¥Èáç„Å™Èò≤ÂÖ∑„ÅÆÊùêÊñô„ÄÇ',
                'Ë≥¢ËÄÖ„ÅÆÊùñ': 'Âè§„ÅÆË≥¢ËÄÖ„ÅåÊÑõÁî®„Åó„ÅüÊùñ„ÄÇÁü•ÊÅµ„ÅÆÂäõ„ÅåÂÆø„Å£„Å¶„ÅÑ„Çã„ÄÇ',
                'ÊôÇ„ÅÆÁ†ÇÊôÇË®à': 'ÊôÇ„ÇíÊìç„Çã„Å®Ë®Ä„Çè„Çå„ÇãÁ•ûÁßòÁöÑ„Å™Á†ÇÊôÇË®à„ÄÇ',
                'ËÅñ„Å™„ÇãÁõæ': 'Á•û„Å´Á•ùÁ¶è„Åï„Çå„ÅüÁõæ„ÄÇ„ÅÇ„Çâ„ÇÜ„ÇãÁÅΩ„ÅÑ„ÇíÈò≤„Åê„ÄÇ',
                '‰∏çÊ≠ªÈ≥•„ÅÆÁæΩÊ†π': '‰∏çÊ≠ªÈ≥•„ÅÆÁæé„Åó„ÅÑÁæΩÊ†π„ÄÇÂÜçÁîü„ÅÆÂäõ„ÇíÊåÅ„Å§„Å®„ÅÑ„ÅÜ„ÄÇ',
                '‰∏ñÁïåÊ®π„ÅÆËëâ': '‰∏ñÁïå„ÅÆ‰∏≠ÂøÉ„Å´Á´ã„Å§Â∑®Â§ß„Å™Ê®π„ÅÆËëâ„ÄÇÁîüÂëΩÂäõ„Å´Ê∫Ä„Å°„Å¶„ÅÑ„Çã„ÄÇ',
                'ÂâµÈÄ†„ÅÆÁü≥': '‰∏ñÁïå„ÇíÂâµÈÄ†„Åó„Åü„Å®„Åï„Çå„ÇãÁ•ûÁßò„ÅÆÁü≥„ÄÇÁÑ°Èôê„ÅÆÂèØËÉΩÊÄß„ÇíÁßò„ÇÅ„Çã„ÄÇ',
                'ÁÑ°Èôê„ÅÆÁü•Ë≠ò': 'ÂÖ®„Å¶„ÅÆÁü•Ë≠ò„ÅåËæº„ÇÅ„Çâ„Çå„ÅüÁµêÊô∂‰Ωì„ÄÇÁúüÁêÜ„Å∏„ÅÆÊââ„Å†„ÄÇ',
                'Êòü„ÅÆÊ¨†Áâá': 'Â§úÁ©∫„Åã„ÇâËêΩ„Å°„ÅüÊòü„ÅÆÊ¨†Áâá„ÄÇÂÆáÂÆô„ÅÆÁ•ûÁßò„ÅåÂÆø„Çã„ÄÇ',
                'ÁúüÁêÜ„ÅÆÊõ∏': '‰∏ñÁïå„ÅÆÁúüÁêÜ„ÅåË®ò„Åï„Çå„ÅüÁ©∂Ê•µ„ÅÆÊõ∏Áâ©„ÄÇË™≠„ÇÄËÄÖ„ÇíÈÅ∏„Å∂„ÄÇ'
            },
            boxImages: {
                common: 'images/Common_box.png',
                rare: 'images/Rare_box.png',
                epic: 'images/Epic_box.png',
                legendary: 'images/Legendary_box.png'
            },
            rarityColors: {
                common: '#8B4513',
                rare: '#4169E1',
                epic: '#9932CC',
                legendary: '#FFD700'
            },
            experienceBonuses: {
                common: 0,
                rare: 10,
                epic: 25,
                legendary: 50
            }
        };
    }
    
    loadPlayerData() {
        const saved = localStorage.getItem('pomodoroGameData');
        return saved ? JSON.parse(saved) : {
            level: 1,
            exp: 0,
            totalItems: 0,
            inventory: {},
            discoveredItems: {},
            totalPomodoros: 0
        };
    }
    
    savePlayerData() {
        localStorage.setItem('pomodoroGameData', JSON.stringify(this.playerData));
    }
    
    startExploration() {
        this.itemBoxes = [];
        this.startTime = Date.now();
        this.updateItemBoxDisplay();
        
        this.explorationTimer = setInterval(() => {
            const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
            const expectedBoxes = Math.min(5, Math.floor(elapsed / (5 * 60)));
            
            while (this.itemBoxes.length < expectedBoxes) {
                this.addItemBox();
            }
        }, 1000);
    }
    
    stopExploration() {
        if (this.explorationTimer) {
            clearInterval(this.explorationTimer);
            this.explorationTimer = null;
        }
        this.startTime = null;
    }
    
    clearBoxes() {
        this.itemBoxes = [];
        this.updateItemBoxDisplay();
    }
    
    addItemBox() {
        const rarity = this.determineRarity();
        this.itemBoxes.push({ rarity, item: null });
        this.updateItemBoxDisplay();
    }
    
    determineRarity() {
        const levelBonus = (this.playerData.level - 1) * 0.5;
        const random = Math.random() * 100;
        
        if (random < 0.5 + levelBonus) return 'legendary';
        if (random < 4 + levelBonus) return 'epic';
        if (random < 15 + levelBonus) return 'rare';
        return 'common';
    }
    
    updateItemBoxDisplay() {
        const container = document.getElementById('itemBoxes');
        container.innerHTML = '';
        
        if (!this.itemData) return;
        
        this.itemBoxes.forEach(box => {
            const img = document.createElement('img');
            img.src = this.itemData.boxImages[box.rarity];
            img.style.cssText = 'width: 24px; height: 24px; image-rendering: pixelated; margin: 2px;';
            img.title = `${box.rarity} „Ç¢„Ç§„ÉÜ„É†„Éú„ÉÉ„ÇØ„Çπ`;
            container.appendChild(img);
        });
    }
    
    completeExploration() {
        this.stopExploration();
        
        if (!this.itemData) {
            console.warn('„Ç¢„Ç§„ÉÜ„É†„Éá„Éº„Çø„Åå„Åæ„Å†Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return;
        }
        
        const foundItems = [];
        let totalExpBonus = 0;
        
        this.itemBoxes.forEach(box => {
            const itemList = this.itemData.items[box.rarity];
            const item = itemList[Math.floor(Math.random() * itemList.length)];
            
            box.item = item;
            foundItems.push({ name: item, rarity: box.rarity });
            
            this.playerData.inventory[item] = (this.playerData.inventory[item] || 0) + 1;
            this.playerData.discoveredItems[item] = box.rarity;
            
            totalExpBonus += this.itemData.experienceBonuses[box.rarity];
        });
        
        const totalExp = 100 + totalExpBonus;
        const oldLevel = this.playerData.level;
        
        this.playerData.exp += totalExp;
        this.playerData.totalItems += foundItems.length;
        this.playerData.totalPomodoros++;
        this.playerData.level = Math.floor(this.playerData.exp / 100) + 1;
        
        const leveledUp = this.playerData.level > oldLevel;
        
        this.savePlayerData();
        this.updateDisplay();
        this.showResult(foundItems, totalExp, leveledUp);
        
        this.itemBoxes = [];
        this.updateItemBoxDisplay();
    }
    
    showResult(items, exp, leveledUp) {
        const modal = document.getElementById('resultModal');
        const background = document.getElementById('modalBackground');
        
        if (!this.itemData) return;
        
        const itemsHtml = items.map(item => 
            `<span style=\"color: ${this.itemData.rarityColors[item.rarity]};\">‚Ä¢ ${item.name} (${item.rarity})</span>`
        ).join('<br>');
        
        document.getElementById('foundItems').innerHTML = `<strong>üéÅ Áô∫Ë¶ã„Åó„Åü„Ç¢„Ç§„ÉÜ„É†:</strong><br>${itemsHtml}`;
        document.getElementById('expGained').innerHTML = `‚ú®ÁµåÈ®ìÂÄ§ +${exp}`;
        
        const levelUpDiv = document.getElementById('levelUpMessage');
        if (leveledUp) {
            levelUpDiv.innerHTML = `üéâ „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÔºÅ Lv.${this.playerData.level}`;
            levelUpDiv.style.display = 'block';
        } else {
            levelUpDiv.style.display = 'none';
        }
        
        modal.style.display = 'block';
        background.style.display = 'block';
    }
    
    // „É¨„Éô„É´„Å´Âøú„Åò„ÅüÁß∞Âè∑„ÇíÂèñÂæó
    getPlayerTitle(level) {
        if (level >= 50) return "„Éù„É¢„Éâ„É≠„Éû„Çπ„Çø„Éº";
        if (level >= 40) return "„ÉÑ„Ç¢„Éº„Ç¨„Ç§„Éâ";
        if (level >= 30) return "„Éù„É¢„Éâ„É≠Âêç‰∫∫";
        if (level >= 25) return "Êï£Ê≠©„ÅåÂ§ßÂ•Ω„Åç";
        if (level >= 20) return "Êï¨Ëôî„Éù„É¢„Éâ„É©„Éº";
        if (level >= 15) return "ËíêÈõÜ‰∏äÊâã";
        if (level >= 10) return "25ÂàÜÈñì„ÅÆÊé¢Á¥¢ËÄÖ";
        if (level >= 5) return "„Éù„É¢„Éâ„É≠ÊÖ£„Çå";
        return "ÂàùÁ¥ö„Éù„É¢„Éâ„É©„Éº";
    }

    updateDisplay() {
        const level = this.playerData.level;
        const title = this.getPlayerTitle(level);
        
        document.getElementById('level').textContent = level;
        document.getElementById('currentExp').textContent = this.playerData.exp % 100;
        document.getElementById('nextExp').textContent = '100';
        
        // Áß∞Âè∑„ÇíÂê´„ÇÅ„Å¶„É¨„Éô„É´Ë°®Á§∫„ÇíÊõ¥Êñ∞
        const playerLevelElement = document.getElementById('playerLevel');
        if (playerLevelElement) {
            playerLevelElement.textContent = `Lv.${level} „Äé${title}„Äè`;
        }
        
        const expPercent = this.playerData.exp % 100;
        document.getElementById('expBar').style.width = expPercent + '%';
        
        const floor = Math.floor(this.playerData.totalPomodoros / 10) + 1;
        console.log(`Debug: totalPomodoros=${this.playerData.totalPomodoros}, floor=${floor}`);
        
        const dungeonElement = document.getElementById('dungeonInfo');
        if (dungeonElement) {
            dungeonElement.textContent = `üìç Ëø∑ÂÆÆ ${floor}F „ÇíÊé¢Á¥¢‰∏≠`;
        } else {
            console.error('dungeonInfo element not found');
        }
    }
}

// „É¢„Éº„ÉÄ„É´Âà∂Âæ°
function closeResultModal() {
    document.getElementById('resultModal').style.display = 'none';
    document.getElementById('modalBackground').style.display = 'none';
}

// „Çø„Éñ„Ç∑„Çπ„ÉÜ„É†
class TabSystem {
    constructor() {
        this.currentTab = 'tasks';
        this.init();
    }
    
    init() {
        // „Çø„Éñ„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.target.dataset.tab;
                this.switchTab(tab);
            });
        });
        
        // „É¨„Ç¢„É™„ÉÜ„Ç£„Éï„Ç£„É´„Çø„Éº„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
        document.querySelectorAll('.rarity-filter').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.setRarityFilter(e.target.dataset.rarity);
            });
        });
    }
    
    switchTab(tabName) {
        // „Çø„Éñ„Éú„Çø„É≥„ÅÆ„Çπ„Çø„Ç§„É´Êõ¥Êñ∞
        document.querySelectorAll('.tab-btn').forEach(btn => {
            if (btn.dataset.tab === tabName) {
                btn.style.backgroundColor = '#73cac6';
                btn.style.color = 'white';
                btn.classList.add('active');
            } else {
                btn.style.backgroundColor = '#DDD';
                btn.style.color = '#666';
                btn.classList.remove('active');
            }
        });
        
        // „Çø„Éñ„Éë„Éç„É´„ÅÆË°®Á§∫Âàá„ÇäÊõø„Åà
        document.querySelectorAll('.tab-panel').forEach(panel => {
            panel.style.display = 'none';
        });
        
        const targetPanel = document.getElementById(`${tabName}Tab`);
        if (targetPanel) {
            targetPanel.style.display = 'block';
        }
        
        this.currentTab = tabName;
        
        // „Çø„ÉñÂàá„ÇäÊõø„ÅàÊôÇ„Å´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊõ¥Êñ∞
        if (tabName === 'items') {
            this.updateItemCatalog();
        } else if (tabName === 'stats') {
            this.updateStats();
        }
    }
    
    setRarityFilter(rarity) {
        // „Éï„Ç£„É´„Çø„Éº„Éú„Çø„É≥„ÅÆ„Çπ„Çø„Ç§„É´Êõ¥Êñ∞
        document.querySelectorAll('.rarity-filter').forEach(btn => {
            if (btn.dataset.rarity === rarity) {
                btn.style.backgroundColor = '#f0f0f0';
                btn.classList.add('active');
            } else {
                btn.style.backgroundColor = 'white';
                btn.classList.remove('active');
            }
        });
        
        // „Ç¢„Ç§„ÉÜ„É†„Ç´„Éº„Éâ„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        document.querySelectorAll('.item-card').forEach(card => {
            if (rarity === 'all' || card.dataset.rarity === rarity) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }
    
    updateItemCatalog() {
        const gameSystem = app.gameSystem;
        const itemGrid = document.getElementById('itemGrid');
        const completionRate = document.getElementById('completionRate');
        
        if (!gameSystem.itemData) {
            itemGrid.innerHTML = '<div>„Ç¢„Ç§„ÉÜ„É†„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>';
            return;
        }
        
        // ÂÖ®„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„Éà„Çí‰ΩúÊàê
        const allItems = [];
        Object.entries(gameSystem.itemData.items).forEach(([rarity, items]) => {
            items.forEach(item => {
                allItems.push({ name: item, rarity });
            });
        });
        
        // Áô∫Ë¶ã„Åó„Åü„Ç¢„Ç§„ÉÜ„É†Êï∞„ÇíË®àÁÆó
        const discoveredCount = Object.keys(gameSystem.playerData.discoveredItems).length;
        const totalCount = allItems.length;
        const percentage = totalCount > 0 ? Math.round((discoveredCount / totalCount) * 100) : 0;
        
        completionRate.textContent = `${discoveredCount}/${totalCount} (${percentage}%)`;
        
        // „Ç¢„Ç§„ÉÜ„É†„Ç´„Éº„Éâ„ÇíÁîüÊàê
        itemGrid.innerHTML = '';
        
        allItems.forEach(({ name, rarity }) => {
            const isDiscovered = gameSystem.playerData.discoveredItems[name];
            const count = gameSystem.playerData.inventory[name] || 0;
            
            const card = document.createElement('div');
            card.className = `item-card ${isDiscovered ? 'discovered' : 'unknown'}`;
            card.dataset.rarity = rarity;
            
            if (isDiscovered) {
                // Áô∫Ë¶ãÊ∏à„Åø„Ç¢„Ç§„ÉÜ„É†
                card.innerHTML = `
                    <div style="color: ${gameSystem.itemData.rarityColors[rarity]}; font-weight: bold; margin-bottom: 8px;">
                        ‚ú® ${name}
                    </div>
                    <div style="font-size: 0.9em; color: #666; margin-bottom: 5px;">
                        ÊâÄÊåÅÊï∞: ${count}ÂÄã
                    </div>
                    <div style="font-size: 0.8em; color: #999; margin-bottom: 8px;">
                        „É¨„Ç¢„É™„ÉÜ„Ç£: ${rarity}
                    </div>
                    <div style="font-size: 0.85em; color: #444; line-height: 1.3; font-style: italic;">
                        ${gameSystem.itemData.descriptions[name]}
                    </div>
                `;
                card.style.cssText = 'border: 1px solid #ddd; padding: 12px; border-radius: 8px; background-color: #fafafa;';
            } else {
                // Êú™Áô∫Ë¶ã„Ç¢„Ç§„ÉÜ„É†
                card.innerHTML = `
                    <div style="color: #999; font-weight: bold; margin-bottom: 8px;">
                        ‚ùì ÔºüÔºüÔºü
                    </div>
                    <div style="font-size: 0.9em; color: #ccc; margin-bottom: 5px;">
                        ÊâÄÊåÅÊï∞: ?ÂÄã
                    </div>
                    <div style="font-size: 0.8em; color: #ccc; margin-bottom: 8px;">
                        „É¨„Ç¢„É™„ÉÜ„Ç£: ${rarity}
                    </div>
                    <div style="font-size: 0.85em; color: #bbb; line-height: 1.3; font-style: italic;">
                        „Åæ„Å†Áô∫Ë¶ã„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì...
                    </div>
                `;
                card.style.cssText = 'border: 1px dashed #ccc; padding: 12px; border-radius: 8px; background-color: #f9f9f9; opacity: 0.7;';
            }
            
            itemGrid.appendChild(card);
        });
    }
    
    updateStats() {
        const gameSystem = app.gameSystem;
        const taskManager = app.taskManager;
        
        // Âü∫Êú¨Áµ±Ë®à
        document.getElementById('totalPomodorosStat').textContent = gameSystem.playerData.totalPomodoros;
        document.getElementById('currentLevelStat').textContent = gameSystem.playerData.level;
        document.getElementById('totalItemsStat').textContent = gameSystem.playerData.totalItems;
        
        const floor = Math.floor(gameSystem.playerData.totalPomodoros / 10) + 1;
        document.getElementById('dungeonFloorStat').textContent = `${floor}F`;
        
        // „É¨„Ç¢„É™„ÉÜ„Ç£Âà•Áµ±Ë®à
        const rarityStats = document.getElementById('rarityStats');
        const rarityCount = { common: 0, rare: 0, epic: 0, legendary: 0 };
        
        Object.entries(gameSystem.playerData.inventory).forEach(([item, count]) => {
            const rarity = gameSystem.playerData.discoveredItems[item];
            if (rarity && rarityCount[rarity] !== undefined) {
                rarityCount[rarity] += count;
            }
        });
        
        if (!gameSystem.itemData) {
            rarityStats.innerHTML = '<div>„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>';
            return;
        }
        
        rarityStats.innerHTML = Object.entries(rarityCount).map(([rarity, count]) => `
            <div style="border: 1px solid ${gameSystem.itemData.rarityColors[rarity]}; padding: 10px; border-radius: 5px; text-align: center;">
                <div style="font-size: 1.5em; font-weight: bold; color: ${gameSystem.itemData.rarityColors[rarity]};">${count}</div>
                <div style="color: #666; font-size: 0.9em;">${gameSystem.itemData.rarityNames[rarity]}</div>
            </div>
        `).join('');
    }
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
const app = new PomodoroApp();
const tabSystem = new TabSystem();